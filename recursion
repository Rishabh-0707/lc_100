class Solution {  //dp
public:
    
    vector<int>dp;
    Solution(){
        dp=vector<int>(31,-1);
    }
    int fib(int n) {
        // vector<int> dp(1000, -1);
        if(n<=1){
            return n;
        }
        // vector<int>dp(n+1);
        if(dp[n]!=-1){
            return dp[n];
        }
        return dp[n]=fib(n-1)+fib(n-2);
        
    }
};
----------------------------------------------------------------------------------------------------
//print the subsequnces of an array using recursion
#include <iostream>
#include <vector>
using namespace std;

void printSubsequences(vector<int>& arr, int index, vector<int>& current) {
    if (index == arr.size()) {
        // Print the current subsequence
        cout << "[";
        for (int i = 0; i < current.size(); i++) {
            cout << current[i];
            if (i < current.size() - 1) cout << ", ";
        }
        cout << "]" << endl;
        return;
    }

    // Include the current element
    current.push_back(arr[index]);
    printSubsequences(arr, index + 1, current);

    // Exclude the current element (backtrack)
    current.pop_back();
    printSubsequences(arr, index + 1, current);
}

int main() {
    vector<int> arr = {1, 2, 3};
    vector<int> current;
    
    cout << "All subsequences:" << endl;
    printSubsequences(arr, 0, current);

    return 0;
}


