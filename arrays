* DEGREE OF AN ARRAY *

class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        unordered_map<int, int> freq;    // Count frequency
        unordered_map<int, int> first;   // First occurrence
        unordered_map<int, int> last;    // Last occurrence
        int degree = 0;

        for (int i = 0; i < nums.size(); i++) {
            int num = nums[i];

            if (first.find(num) == first.end()) {
                first[num] = i; // record only first occurrence
            }

            last[num] = i;      // update last occurrence
            freq[num]++;        // increase frequency
            degree = max(degree, freq[num]); // keep track of max frequency
        }

        int minLen = nums.size();

        for (auto& [num, f] : freq) {
            if (f == degree) {
                minLen = min(minLen, last[num] - first[num] + 1);
            }
        }

        return minLen;
    }
};
